message Request
{
    enum CommandType
    {
        CONNECT = 1;
        DISCONNECT = 2;
        RESET_BOARD = 3;
        GET_STATUS = 4;
        GET_REGISTER_LIST = 5;
        GET_REGISTER_VALUE = 6;
        SET_REGISTER_VALUE = 7;
        GET_REGISTER_VALUES = 8;
        SET_REGISTER_VALUES = 9;
        LOAD_FIRMWARE = 10;
        LOAD_FIRMWARE_BLOCKING = 11;
        GET_CHANNELISED_DATA = 12;
        GET_RAW_DATA = 13;
    }

    enum DeviceType
    {
        BOARD = 1;
        FPGA_1 = 2;
        FPGA_2 = 4;
    }

    enum RegisterType
    {
        SENSOR = 1;
        BOARD_REGISTER = 2;
        FIRMWARE_REGISTER = 3;
    }

    enum BoardMake
    {
        TPM = 1;
        ROACH = 2;
        UNIBOARD = 3;
    }

    enum ProcessingPhase
    {
        DSP = 1;
        CSP = 2;
    }

    required CommandType command = 1;
    optional string ip = 2;
    optional int32 port = 3;
    optional int32 id = 4;

    optional string registerName = 6;
    optional RegisterType registerFamily = 7;
    optional DeviceType device = 8;
    optional uint32 n = 9;
    optional string file = 10;
    optional uint32 value = 11;
    repeated uint32 values = 12;
    optional BoardMake board = 13;
    optional ProcessingPhase processingPhase = 14;
    optional ChannelisedDataRequest channelisedDataRequest = 15;
    optional RawDataRequest rawDataRequest = 16;
}

message Reply
{
    enum ResultType
    {
        SUCCESS         = 0;
        FAILURE         = -1;
        NOT_IMPLEMENTED = -2;
    }

    enum TpmStatus
    {
        OK = 0;
        LOADING_FIRMWARE = -1;
        CONFIG_ERROR     = -2;
        BOARD_ERROR      = -3;
        NOT_CONNECTED    = -4;
        NETWORK_ERROR    = -5;
    }

    enum PermissionType
    {
        READ      = 1;
        WRITE     = 2;
        READWRITE = 3;
    }

    message RegisterInfoType
    {
        required string name               = 1;
        required RegisterType type         = 2;
        required DeviceType device         = 3;
        required PermissionType permission = 4;
        required uint32 size               = 5;
        required string description        = 6;
        required uint32 value              = 7;
        required uint32 bits               = 8;
    }

    message SPIInfoType
    {
        required string name = 1;
        required uint32 spi_sclk = 2;
        required uint32 spi_en = 3;
    }

    enum DeviceType
    {
        BOARD = 1;
        FPGA_1 = 2;
        FPGA_2 = 4;
    }

    enum RegisterType
    {
        SENSOR = 1;
        BOARD_REGISTER = 2;
        FIRMWARE_REGISTER = 3;
        SPI_DEVICE = 4;
        COMPONENT = 5;
    }

    message RawDataReply
    {
        message AdcPower
        {
            repeated int32 powerSamples = 1;
        }

        repeated AdcPower adcChannels = 1;
    }

    required ResultType result = 1;
    optional PermissionType permission = 2;
    optional TpmStatus status = 3;
    optional uint32 value = 4;
    repeated uint32 values = 5;
    repeated RegisterInfoType registerList = 6;
    optional string message = 7;
    optional int32 id = 8;
    repeated string firmware = 9;
    optional RawDataReply rawData = 10;
}

message ChannelisedDataRequest
{
    required int32 AntennaId   = 1;
    optional int32 SampleCount = 2;
}


message ChannelisedDataResponse
{
    enum Polarization
    {
        X  = 1;
        Y  = 2;
        XY = 3;
    }

    message ComplexSignedInt
    {
        required int32 Real = 1;
        required int32 Imaginary = 2;
    }

    repeated ComplexSignedInt Csi = 1;
    required int32 AntennaId  = 2;
    required Polarization pol = 3;
    required int32 SampleCount = 4;
    required int32 BitsPerSample = 5;
}

message RawDataRequest
{
    required int32 SampleCount = 1;
}
